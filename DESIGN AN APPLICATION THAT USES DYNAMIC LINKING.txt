Ex.No: 5
DESIGN AN APPLICATION THAT USES DYNAMIC LINKING

Aim:
To design an application that uses dynamic linking.

Algorithm:
Step 1:
- Create a base Android app project in Android Studio and add a dynamic feature module.

Step 2:
- Implement feature logic such as a DynamicFeatureActivity inside the dynamic feature module.

Step 3:
- In the main appâ€™s activity, use SplitInstallManager to request downloading and installing the dynamic feature when triggered.

Step 4:
- If the dynamic feature is not installed, download and install it using SplitInstallManager.

Step 5:
- After installation, launch the dynamic feature activity.

activity_main.xml:
-------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <Button
        android:id="@+id/loadFeatureButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Load Feature"
        android:layout_centerInParent="true"/>
</RelativeLayout>
-------------------------------------------------

MainActivity.java:
-------------------------------------------------
package com.example.dynamiclinking;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import androidx.appcompat.app.AppCompatActivity;
import com.google.android.play.core.splitinstall.SplitInstallManager;
import com.google.android.play.core.splitinstall.SplitInstallManagerFactory;
import com.google.android.play.core.splitinstall.SplitInstallRequest;
import com.google.android.play.core.splitinstall.SplitInstallException;

public class MainActivity extends AppCompatActivity {

    private SplitInstallManager splitInstallManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        splitInstallManager = SplitInstallManagerFactory.create(this);

        findViewById(R.id.loadFeatureButton).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                loadDynamicFeature();
            }
        });
    }

    private void loadDynamicFeature() {
        SplitInstallRequest request = SplitInstallRequest.newBuilder()
                .addModule("dynamic_feature")  // Specify dynamic feature module name
                .build();

        splitInstallManager.startInstall(request)
                .addOnSuccessListener(sessionId -> {
                    launchDynamicFeatureActivity();
                })
                .addOnFailureListener(e -> {
                    if (e instanceof SplitInstallException) {
                        // Handle installation error
                    }
                });
    }

    private void launchDynamicFeatureActivity() {
        Intent intent = new Intent(MainActivity.this, DynamicFeatureActivity.class);
        startActivity(intent);
    }
}
-------------------------------------------------

Result:
The application that uses dynamic linking was successfully designed and executed.
