Ex.No: 6
DEVELOP AN APPLICATION THAT MAKES USE OF MOBILE DATABASE

Aim:
To develop an application that makes use of a mobile database.

Algorithm:
Step 1: Initialize UI and Database
- Set up EditText, Button, ListView.
- Initialize SQLiteOpenHelper for database operations.

Step 2: Create and Manage Database
- Define an SQLite database with a table to store user data (e.g., name and email).
- Implement addUser(), getAllUsers(), and clearAllUsers() methods.

Step 3: Insert and Retrieve Data
- Allow users to enter data via EditText.
- Insert data into the database using INSERT queries.
- Retrieve and display all stored data in a ListView.

Step 4: Update and Delete Operations
- Implement optional features to update or delete records if needed.

Step 5: Test and Optimize Performance
- Ensure smooth data transactions.
- Optimize queries to reduce storage and retrieval time.

activity_main.xml:
-------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    tools:context=".MainActivity">

    <EditText
        android:id="@+id/nameEditText"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter Name" />

    <EditText
        android:id="@+id/emailEditText"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter Email"
        android:layout_below="@id/nameEditText"
        android:layout_marginTop="16dp" />

    <Button
        android:id="@+id/saveButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Save"
        android:layout_below="@id/emailEditText"
        android:layout_marginTop="16dp"
        android:layout_alignParentRight="true"/>

    <ListView
        android:id="@+id/userListView"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/saveButton"
        android:layout_marginTop="16dp" />

    <Button
        android:id="@+id/clearButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Clear Data"
        android:layout_below="@id/userListView"
        android:layout_marginTop="16dp"
        android:layout_centerHorizontal="true"/>
</RelativeLayout>
-------------------------------------------------

MainActivity.java:
-------------------------------------------------
package com.example.db_app;

import android.database.Cursor;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.SimpleCursorAdapter;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private EditText nameEditText, emailEditText;
    private Button saveButton, clearButton;
    private ListView userListView;
    private DatabaseHelper databaseHelper;
    private SimpleCursorAdapter adapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        nameEditText = findViewById(R.id.nameEditText);
        emailEditText = findViewById(R.id.emailEditText);
        saveButton = findViewById(R.id.saveButton);
        clearButton = findViewById(R.id.clearButton);
        userListView = findViewById(R.id.userListView);

        databaseHelper = new DatabaseHelper(this);

        loadUserData();

        saveButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String name = nameEditText.getText().toString().trim();
                String email = emailEditText.getText().toString().trim();

                if (!name.isEmpty() && !email.isEmpty()) {
                    long result = databaseHelper.addUser(name, email);
                    if (result != -1) {
                        Toast.makeText(MainActivity.this, "User Added!", Toast.LENGTH_SHORT).show();
                        nameEditText.setText("");
                        emailEditText.setText("");
                        loadUserData();
                    } else {
                        Toast.makeText(MainActivity.this, "User already exists or error occurred.", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    Toast.makeText(MainActivity.this, "Please fill in both fields.", Toast.LENGTH_SHORT).show();
                }
            }
        });

        clearButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                databaseHelper.clearAllUsers();
                loadUserData();
                Toast.makeText(MainActivity.this, "All users deleted!", Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void loadUserData() {
        Cursor cursor = databaseHelper.getAllUsers();
        if (cursor != null) {
            String[] from = {DatabaseHelper.COLUMN_NAME, DatabaseHelper.COLUMN_EMAIL};
            int[] to = {android.R.id.text1, android.R.id.text2};

            adapter = new SimpleCursorAdapter(this, android.R.layout.simple_list_item_2, cursor, from, to, 0);
            userListView.setAdapter(adapter);
        }
    }
}
-------------------------------------------------

Result:
The application that makes use of a mobile database was successfully developed and executed.
