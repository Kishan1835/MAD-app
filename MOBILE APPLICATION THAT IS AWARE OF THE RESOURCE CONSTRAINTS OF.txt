Ex.No: 4
DESIGN A MOBILE APPLICATION THAT IS AWARE OF THE RESOURCE CONSTRAINTS OF MOBILE DEVICES

Aim:
To develop a mobile application that is aware of the resource constraints of mobile devices.

Algorithm:
Step 1: Initialize UI and Optimize Components
- Set up essential UI components (buttons, text views, RecyclerView).
- Use lightweight layouts and efficient ViewHolders for better performance.

Step 2: Manage Background Processes
- Avoid unnecessary background services.
- Use WorkManager or Handler for background tasks instead of constantly running services.

Step 3: Optimize Network and Data Usage
- Implement lazy loading for network requests.
- Use ConnectivityManager to check network status before making requests.

Step 4: Reduce Memory and Battery Usage
- Use BitmapFactory options for optimized image loading.
- Implement efficient data structures and avoid memory leaks.

Step 5: Test and Monitor Performance
- Use Android Profiler to measure CPU, memory, and battery usage.
- Optimize based on performance metrics.

activity_main.xml:
-------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:background="@drawable/gradient_bg"
    tools:context=".MainActivity">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Task:"
        android:textSize="20sp"
        android:textColor="@android:color/white"
        android:layout_marginBottom="8dp" />

    <EditText
        android:id="@+id/taskInput"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter Task"
        android:padding="10dp"
        android:background="@android:drawable/edit_text"
        android:textColor="@android:color/black"
        android:textColorHint="@android:color/darker_gray"
        android:layout_marginBottom="10dp" />

    <Button
        android:id="@+id/addTaskButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Add Task"
        android:layout_gravity="center_horizontal"
        android:padding="10dp"
        android:background="?android:attr/selectableItemBackground"
        android:textColor="@android:color/white"
        android:textStyle="bold"
        android:layout_marginBottom="10dp" />

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/taskRecyclerView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:layout_marginTop="10dp"
        android:scrollbars="vertical"
        android:background="@android:color/white" />
</LinearLayout>
-------------------------------------------------

MainActivity.java:
-------------------------------------------------
package com.example.rescons;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import java.util.List;

public class MainActivity extends AppCompatActivity {

    private EditText taskInput;
    private Button addTaskButton;
    private RecyclerView taskRecyclerView;
    private TaskAdapter taskAdapter;
    private List<Task> taskList;
    private DatabaseHelper databaseHelper;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        taskInput = findViewById(R.id.taskInput);
        addTaskButton = findViewById(R.id.addTaskButton);
        taskRecyclerView = findViewById(R.id.taskRecyclerView);

        databaseHelper = new DatabaseHelper(this);
        taskList = databaseHelper.getAllTasks();

        taskAdapter = new TaskAdapter(taskList, databaseHelper);
        taskRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        taskRecyclerView.setAdapter(taskAdapter);

        addTaskButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String taskText = taskInput.getText().toString().trim();
                if (!taskText.isEmpty()) {
                    Task newTask = new Task(taskText);
                    long id = databaseHelper.addTask(newTask);
                    if (id != -1) {
                        newTask.setId((int) id);
                        taskList.add(newTask);
                        taskAdapter.notifyItemInserted(taskList.size() - 1);
                        taskInput.setText("");
                    } else {
                        Toast.makeText(MainActivity.this, "Error adding task", Toast.LENGTH_SHORT).show();
                    }
                }
            }
        });
    }
}
-------------------------------------------------

Result:
The mobile application that is aware of the resource constraints of mobile devices was successfully developed and executed.
